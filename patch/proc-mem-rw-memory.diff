diff --git a/gdbserver/linux-low.cc b/gdbserver/linux-low.cc
index 7726a4a0c36..09158a748e3 100644
--- a/gdbserver/linux-low.cc
+++ b/gdbserver/linux-low.cc
@@ -5289,6 +5289,68 @@
   return false;
 }
 
+
+static int
+proc_xfer_memory (CORE_ADDR memaddr, unsigned char *readbuf,
+		  const gdb_byte *writebuf, int len)
+{
+  gdb_assert ((readbuf == nullptr) != (writebuf == nullptr));
+
+  process_info *proc = current_process ();
+  char buf[0x100];
+  snprintf(buf, sizeof(buf), "/proc/%d/mem", proc->pid);
+  int fd = open(buf, O_RDWR);
+  if (fd == -1)
+    return EIO;
+
+  while (len > 0)
+    {
+      int bytes;
+
+      /* Use pread64/pwrite64 if available, since they save a syscall
+	 and can handle 64-bit offsets even on 32-bit platforms (for
+	 instance, SPARC debugging a SPARC64 application).  But only
+	 use them if the offset isn't so high that when cast to off_t
+	 it'd be negative, as seen on SPARC64.  pread64/pwrite64
+	 outright reject such offsets.  lseek does not.  */
+#ifdef HAVE_PREAD64
+      if ((off_t) memaddr >= 0)
+	bytes = (readbuf != nullptr
+		 ? pread64 (fd, readbuf, len, memaddr)
+		 : pwrite64 (fd, writebuf, len, memaddr));
+      else
+#endif
+	{
+	  bytes = -1;
+	  if (lseek (fd, memaddr, SEEK_SET) != -1)
+	    bytes = (readbuf != nullptr
+		     ? read (fd, readbuf, len)
+		     : write (fd, writebuf, len));
+	}
+
+      if (bytes < 0) {
+        close(fd);
+      	return errno;
+      }
+      else if (bytes == 0)
+	{
+	  /* EOF means the address space is gone, the whole process
+	     exited or execed.  */
+    close(fd);
+	  return EIO;
+	}
+
+      memaddr += bytes;
+      if (readbuf != nullptr)
+	readbuf += bytes;
+      else
+	writebuf += bytes;
+      len -= bytes;
+    }
+  close(fd);
+  return 0;
+}
+
 /* A wrapper for the read_memory target op.  */
 
 static int
@@ -5304,6 +5366,10 @@
 linux_process_target::read_memory (CORE_ADDR memaddr,
 				   unsigned char *myaddr, int len)
 {
+  const char *proc_rw_mem = getenv("GS_PROC_RW_MEM");
+  if (proc_rw_mem != nullptr) {
+    return proc_xfer_memory(memaddr, myaddr, nullptr, len);
+  }
   int pid = lwpid_of (current_thread);
   PTRACE_XFER_TYPE *buffer;
   CORE_ADDR addr;
@@ -5394,6 +5460,12 @@
 linux_process_target::write_memory (CORE_ADDR memaddr,
 				    const unsigned char *myaddr, int len)
 {
+
+  const char *proc_rw_mem = getenv("GS_PROC_RW_MEM");
+  if (proc_rw_mem != nullptr) {
+    return proc_xfer_memory(memaddr, nullptr, (const gdb_byte *)myaddr, len);
+  }
+
   int i;
   /* Round starting address down to longword boundary.  */
   CORE_ADDR addr = memaddr & -(CORE_ADDR) sizeof (PTRACE_XFER_TYPE);
